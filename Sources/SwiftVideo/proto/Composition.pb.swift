// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Composition.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//SwiftVideo, Copyright 2019 Unpause SAS
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum AspectMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case aspectNone // = 0
  case aspectFit // = 1
  case aspectFill // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .aspectNone
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .aspectNone
    case 1: self = .aspectFit
    case 2: self = .aspectFill
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .aspectNone: return 0
    case .aspectFit: return 1
    case .aspectFill: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension AspectMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [AspectMode] = [
    .aspectNone,
    .aspectFit,
    .aspectFill,
  ]
}

#endif  // swift(>=4.2)

public enum PictureOrigin: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case originCenter // = 0
  case originTopLeft // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .originCenter
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .originCenter
    case 1: self = .originTopLeft
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .originCenter: return 0
    case .originTopLeft: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension PictureOrigin: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PictureOrigin] = [
    .originCenter,
    .originTopLeft,
  ]
}

#endif  // swift(>=4.2)

public enum PictureAnchor: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case anchorTopLeft // = 0
  case anchorTopRight // = 1
  case anchorBottomLeft // = 2
  case anchorBottomRight // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .anchorTopLeft
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .anchorTopLeft
    case 1: self = .anchorTopRight
    case 2: self = .anchorBottomLeft
    case 3: self = .anchorBottomRight
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .anchorTopLeft: return 0
    case .anchorTopRight: return 1
    case .anchorBottomLeft: return 2
    case .anchorBottomRight: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension PictureAnchor: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PictureAnchor] = [
    .anchorTopLeft,
    .anchorTopRight,
    .anchorBottomLeft,
    .anchorBottomRight,
  ]
}

#endif  // swift(>=4.2)

public struct Vec2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Float = 0

  public var y: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Vec3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Float = 0

  public var y: Float = 0

  public var z: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Vec4 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Float = 0

  public var y: Float = 0

  public var z: Float = 0

  public var w: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ElementState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var picPos: Vec3 {
    get {return _storage._picPos ?? Vec3()}
    set {_uniqueStorage()._picPos = newValue}
  }
  /// Returns true if `picPos` has been explicitly set.
  public var hasPicPos: Bool {return _storage._picPos != nil}
  /// Clears the value of `picPos`. Subsequent reads from it will return its default value.
  public mutating func clearPicPos() {_uniqueStorage()._picPos = nil}

  public var size: Vec2 {
    get {return _storage._size ?? Vec2()}
    set {_uniqueStorage()._size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {_uniqueStorage()._size = nil}

  public var textureOffset: Vec2 {
    get {return _storage._textureOffset ?? Vec2()}
    set {_uniqueStorage()._textureOffset = newValue}
  }
  /// Returns true if `textureOffset` has been explicitly set.
  public var hasTextureOffset: Bool {return _storage._textureOffset != nil}
  /// Clears the value of `textureOffset`. Subsequent reads from it will return its default value.
  public mutating func clearTextureOffset() {_uniqueStorage()._textureOffset = nil}

  public var rotation: Float {
    get {return _storage._rotation}
    set {_uniqueStorage()._rotation = newValue}
  }

  public var transparency: Float {
    get {return _storage._transparency}
    set {_uniqueStorage()._transparency = newValue}
  }

  public var audioGain: Float {
    get {return _storage._audioGain}
    set {_uniqueStorage()._audioGain = newValue}
  }

  public var audioPos: Vec2 {
    get {return _storage._audioPos ?? Vec2()}
    set {_uniqueStorage()._audioPos = newValue}
  }
  /// Returns true if `audioPos` has been explicitly set.
  public var hasAudioPos: Bool {return _storage._audioPos != nil}
  /// Clears the value of `audioPos`. Subsequent reads from it will return its default value.
  public mutating func clearAudioPos() {_uniqueStorage()._audioPos = nil}

  public var picAspect: AspectMode {
    get {return _storage._picAspect}
    set {_uniqueStorage()._picAspect = newValue}
  }

  public var picOrigin: PictureOrigin {
    get {return _storage._picOrigin}
    set {_uniqueStorage()._picOrigin = newValue}
  }

  /// r g b a 
  public var fillColor: Vec4 {
    get {return _storage._fillColor ?? Vec4()}
    set {_uniqueStorage()._fillColor = newValue}
  }
  /// Returns true if `fillColor` has been explicitly set.
  public var hasFillColor: Bool {return _storage._fillColor != nil}
  /// Clears the value of `fillColor`. Subsequent reads from it will return its default value.
  public mutating func clearFillColor() {_uniqueStorage()._fillColor = nil}

  /// l t r b 
  public var borderSize: Vec4 {
    get {return _storage._borderSize ?? Vec4()}
    set {_uniqueStorage()._borderSize = newValue}
  }
  /// Returns true if `borderSize` has been explicitly set.
  public var hasBorderSize: Bool {return _storage._borderSize != nil}
  /// Clears the value of `borderSize`. Subsequent reads from it will return its default value.
  public mutating func clearBorderSize() {_uniqueStorage()._borderSize = nil}

  public var hidden: Bool {
    get {return _storage._hidden}
    set {_uniqueStorage()._hidden = newValue}
  }

  public var muted: Bool {
    get {return _storage._muted}
    set {_uniqueStorage()._muted = newValue}
  }

  public var parentAnchor: [PictureAnchor] {
    get {return _storage._parentAnchor}
    set {_uniqueStorage()._parentAnchor = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Element {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var states: Dictionary<String,ElementState> = [:]

  public var initialState: String = String()

  public var parent: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Scene {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var elements: Dictionary<String,Element> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Composition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var scenes: Dictionary<String,Scene> = [:]

  public var initialScene: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension AspectMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aspectNone"),
    1: .same(proto: "aspectFit"),
    2: .same(proto: "aspectFill"),
  ]
}

extension PictureOrigin: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "originCenter"),
    1: .same(proto: "originTopLeft"),
  ]
}

extension PictureAnchor: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anchorTopLeft"),
    1: .same(proto: "anchorTopRight"),
    2: .same(proto: "anchorBottomLeft"),
    3: .same(proto: "anchorBottomRight"),
  ]
}

extension Vec2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Vec2"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Vec2, rhs: Vec2) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vec3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Vec3"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      case 3: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Vec3, rhs: Vec3) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vec4: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Vec4"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
    4: .same(proto: "w"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      case 3: try decoder.decodeSingularFloatField(value: &self.z)
      case 4: try decoder.decodeSingularFloatField(value: &self.w)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 3)
    }
    if self.w != 0 {
      try visitor.visitSingularFloatField(value: self.w, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Vec4, rhs: Vec4) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.w != rhs.w {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ElementState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ElementState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "picPos"),
    2: .same(proto: "size"),
    3: .same(proto: "textureOffset"),
    4: .same(proto: "rotation"),
    5: .same(proto: "transparency"),
    6: .same(proto: "audioGain"),
    7: .same(proto: "audioPos"),
    8: .same(proto: "picAspect"),
    9: .same(proto: "picOrigin"),
    10: .same(proto: "fillColor"),
    11: .same(proto: "borderSize"),
    12: .same(proto: "hidden"),
    13: .same(proto: "muted"),
    14: .same(proto: "parentAnchor"),
  ]

  fileprivate class _StorageClass {
    var _picPos: Vec3? = nil
    var _size: Vec2? = nil
    var _textureOffset: Vec2? = nil
    var _rotation: Float = 0
    var _transparency: Float = 0
    var _audioGain: Float = 0
    var _audioPos: Vec2? = nil
    var _picAspect: AspectMode = .aspectNone
    var _picOrigin: PictureOrigin = .originCenter
    var _fillColor: Vec4? = nil
    var _borderSize: Vec4? = nil
    var _hidden: Bool = false
    var _muted: Bool = false
    var _parentAnchor: [PictureAnchor] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _picPos = source._picPos
      _size = source._size
      _textureOffset = source._textureOffset
      _rotation = source._rotation
      _transparency = source._transparency
      _audioGain = source._audioGain
      _audioPos = source._audioPos
      _picAspect = source._picAspect
      _picOrigin = source._picOrigin
      _fillColor = source._fillColor
      _borderSize = source._borderSize
      _hidden = source._hidden
      _muted = source._muted
      _parentAnchor = source._parentAnchor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._picPos)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._size)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._textureOffset)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._rotation)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._transparency)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._audioGain)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._audioPos)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._picAspect)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._picOrigin)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._fillColor)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._borderSize)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._hidden)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._muted)
        case 14: try decoder.decodeRepeatedEnumField(value: &_storage._parentAnchor)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._picPos {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._size {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._textureOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._rotation != 0 {
        try visitor.visitSingularFloatField(value: _storage._rotation, fieldNumber: 4)
      }
      if _storage._transparency != 0 {
        try visitor.visitSingularFloatField(value: _storage._transparency, fieldNumber: 5)
      }
      if _storage._audioGain != 0 {
        try visitor.visitSingularFloatField(value: _storage._audioGain, fieldNumber: 6)
      }
      if let v = _storage._audioPos {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._picAspect != .aspectNone {
        try visitor.visitSingularEnumField(value: _storage._picAspect, fieldNumber: 8)
      }
      if _storage._picOrigin != .originCenter {
        try visitor.visitSingularEnumField(value: _storage._picOrigin, fieldNumber: 9)
      }
      if let v = _storage._fillColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._borderSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._hidden != false {
        try visitor.visitSingularBoolField(value: _storage._hidden, fieldNumber: 12)
      }
      if _storage._muted != false {
        try visitor.visitSingularBoolField(value: _storage._muted, fieldNumber: 13)
      }
      if !_storage._parentAnchor.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._parentAnchor, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ElementState, rhs: ElementState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._picPos != rhs_storage._picPos {return false}
        if _storage._size != rhs_storage._size {return false}
        if _storage._textureOffset != rhs_storage._textureOffset {return false}
        if _storage._rotation != rhs_storage._rotation {return false}
        if _storage._transparency != rhs_storage._transparency {return false}
        if _storage._audioGain != rhs_storage._audioGain {return false}
        if _storage._audioPos != rhs_storage._audioPos {return false}
        if _storage._picAspect != rhs_storage._picAspect {return false}
        if _storage._picOrigin != rhs_storage._picOrigin {return false}
        if _storage._fillColor != rhs_storage._fillColor {return false}
        if _storage._borderSize != rhs_storage._borderSize {return false}
        if _storage._hidden != rhs_storage._hidden {return false}
        if _storage._muted != rhs_storage._muted {return false}
        if _storage._parentAnchor != rhs_storage._parentAnchor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Element: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Element"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "states"),
    2: .same(proto: "initialState"),
    3: .same(proto: "parent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,ElementState>.self, value: &self.states)
      case 2: try decoder.decodeSingularStringField(value: &self.initialState)
      case 3: try decoder.decodeSingularStringField(value: &self.parent)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.states.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,ElementState>.self, value: self.states, fieldNumber: 1)
    }
    if !self.initialState.isEmpty {
      try visitor.visitSingularStringField(value: self.initialState, fieldNumber: 2)
    }
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Element, rhs: Element) -> Bool {
    if lhs.states != rhs.states {return false}
    if lhs.initialState != rhs.initialState {return false}
    if lhs.parent != rhs.parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Scene: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Scene"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "elements"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Element>.self, value: &self.elements)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.elements.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Element>.self, value: self.elements, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Scene, rhs: Scene) -> Bool {
    if lhs.elements != rhs.elements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Composition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Composition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scenes"),
    3: .same(proto: "initialScene"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Scene>.self, value: &self.scenes)
      case 3: try decoder.decodeSingularStringField(value: &self.initialScene)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scenes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Scene>.self, value: self.scenes, fieldNumber: 1)
    }
    if !self.initialScene.isEmpty {
      try visitor.visitSingularStringField(value: self.initialScene, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Composition, rhs: Composition) -> Bool {
    if lhs.scenes != rhs.scenes {return false}
    if lhs.initialScene != rhs.initialScene {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
